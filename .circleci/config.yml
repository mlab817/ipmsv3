# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.2-node-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    steps:
      - checkout

      # - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      # - run: sudo docker-php-ext-install zip gettext
      # - run: sudo apt-get install libwebp-dev libjpeg-dev libpng-dev libxpm-dev libfreetype6-dev libbz2-dev
      # - run: sudo docker-php-ext-install zip intl
      # - run: sudo docker-php-ext-configure gd --with-gd --with-webp-dir --with-jpeg-dir --with-png-dir --with-zlib-dir --with-xpm-dir --with-freetype-dir
      # - run: sudo docker-php-ext-install gd

      # Download and cache dependencies
      # - restore_cache:
      #     keys:
      #       # "composer.lock" can be used if it is committed to the repo
      #       - v1-dependencies-{{ checksum "composer.json" }}
      #       # fallback to using the latest cache if no exact match is found
      #       - v1-dependencies-
      #
      # - run: composer install -n --prefer-dist
      #
      # - save_cache:
      #     key: v1-dependencies-{{ checksum "composer.json" }}
      #     paths:
      #       - ./vendor
      # - restore_cache:
      #     keys:
      #       - node-v1-{{ checksum "package.json" }}
      #       - node-v1-
      # - run: yarn install
      # - save_cache:
      #     key: node-v1-{{ checksum "package.json" }}
      #     paths:
      #       - node_modules

      - run:
          name: Deploy Over SSH
          command: |
            ssh $SSH_USER@$SSH_HOST cd public_html/staging
            ssh $SSH_USER@$SSH_HOST git pull origin staging
      # prepare the database for testing
      # - run: touch storage/testing.sqlite
      # - run: php artisan migrate --env=testing --database=sqlite_testing --force

      # run tests with phpunit or codecept
      # activate code below to activate testing
      # - run: ./vendor/bin/phpunit
      # - run: ./vendor/bin/codecept build
      # - run: ./vendor/bin/codecept run
