extend type Mutation {
  "Processes project"
	processProject(
		project_id: ID!
		processing_status_id: ID!
		remarks: String
	): Project
    @field(resolver:"ProcessProjectMutation")
    @guard(with:["api"])

  validateProject(
    id: ID!
    validation_data: Boolean
    validation_signed: Boolean
    remarks: String
  ): Project
    @field(resolver:"ValidateProjectMutation")
    @guard(with:["api"])
    @event(dispatch: "App\\Events\\ProjectProcessed")

  returnProject(
    project_id: ID!
    remarks: String
  ): Project
    @field(resolver:"ReturnProjectMutation")
    @guard(with:["api"])
    @event(dispatch: "App\\Events\\ProjectProcessed")

  finalizeProject(
    input: UpdateProjectInput! @spread
  ): Project
    @update
    @can(ability: "update", find: "id", injectArgs: true)
    @guard(with:["api"])
    @event(dispatch: "App\\Events\\ProjectFinalized")

  encodeProject(
    project_id: ID!
    pipol_id: Int!
    pipol_code: String!
    remarks: String!
  ): Project
    @field(resolver:"EncodeProjectMutation")
    @guard(with:["api"])

  uploadSignedCopy(
      id: ID!
      signed_copy: Upload
      remarks: String
    ): Project
    @field(resolver:"UploadSignedCopy")
    @guard(with:["api"])

    endorseProject(
        id: ID!
        signed_copy: Upload
        remarks: String
    ): Project
    @field(resolver: "UploadSignedCopy")
    @guard(with:["api"])
}

type Query {
  project_processing_statuses: [ProjectProcessingStatus] @all
}

type ProjectProcessingStatus {
  id: ID
  project_id: ID!
  project: Project @belongsTo
  processing_status_id: ID!
  processing_status: ProcessingStatus @belongsTo
  processed_by: ID!
  processor: User @belongsTo
  remarks: String
  processed_at: String
  created_at: String
  updated_at: String
  deleted_at: String
}
