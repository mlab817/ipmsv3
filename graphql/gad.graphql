extend type Query {
	gad_questions: [GadQuestion] @all

	gad_subquestions: [GadSubquestion] @all

	gads: [Gad] @all
}

extend type Mutation {
	assessGadResponsiveness(input: ConnectProjectGadSubquestionInput @spread): Project @update
}

input ConnectProjectGadSubquestionInput {
	id: ID!
	project_gad_subquestions: UpdateProjectGadSubquestionHasMany
}

input UpdateProjectGadSubquestionHasMany {
	upsert: [UpsertGadSubquestionInput!]
	delete: [ID!]
}

input UpsertGadSubquestionInput {
	id: ID
	gad_subquestion_id: ID!
	gad_choice_id: ID!
}

type GadQuestion {
	id: ID!
	name: String!
	gad_subquestions: [GadSubquestion] @hasMany
}

type GadSubquestion {
	id: ID!
	name: String!
	gad_question: GadQuestion @belongsTo
	gad_choices: [GadChoice] @belongsToMany
	projects: [Project] @belongsToMany
}

type GadChoice {
	id: ID!
	name: String!
	value: Float!
	gad_subquestions: [GadSubquestion] @belongsToMany
}

type Gad {
	id: ID!
	name: String
}